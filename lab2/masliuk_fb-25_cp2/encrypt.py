import string
import os
import matplotlib.pyplot as plt
import numpy as np


if not os.path.exists('keys'):
    os.makedirs('keys')

def prepare_russian_text(text):
    """Подготовка текста: удаление пробелов, знаков препинания, приведение к нижнему регистру"""
    russian_alphabet = 'абвгдежзийклмнопрстуфхцчшщъыьэюя'
    text = text.lower().replace('ё', 'е')
    return ''.join(char for char in text if char in russian_alphabet)

def vigenere_encrypt(text, key):
    """Шифрование текста методом Виженера"""
    russian_alphabet = 'абвгдежзийклмнопрстуфхцчшщъыьэюя'
    m = len(russian_alphabet)
    result = ''
    
    for i in range(len(text)):
        char_idx = russian_alphabet.index(text[i])
        key_idx = russian_alphabet.index(key[i % len(key)])
        encrypted_idx = (char_idx + key_idx) % m
        result += russian_alphabet[encrypted_idx]
        
    return result

def calculate_index_of_coincidence(text):
    """Вычисляет индекс совпадения для заданного текста"""
    n = len(text)
    if n <= 1:
        return 0
        
    freqs = {}
    for char in text:
        freqs[char] = freqs.get(char, 0) + 1
    
    index = 0
    for count in freqs.values():
        index += count * (count - 1)
    
    return index / (n * (n - 1))

def plot_indices_of_coincidence(original_text, encrypted_texts):
    """Построение графика индексов соответствия"""
    original_ioc = calculate_index_of_coincidence(original_text)
    
    encrypted_ioc = {
        length: calculate_index_of_coincidence(text)
        for length, text in encrypted_texts.items()
    }
    
    labels = ['Початковий'] + [f'r={k}' for k in encrypted_ioc.keys()]
    values = [original_ioc] + list(encrypted_ioc.values())
    
    plt.figure(figsize=(12, 6))
    bars = plt.bar(labels, values)
    
    for bar in bars:
        height = bar.get_height()
        plt.text(bar.get_x() + bar.get_width()/2., height,
                f'{height:.4f}',
                ha='center', va='bottom')
    
    plt.title('Індекси відповідності для вихідного та зашифрованих текстів')
    plt.xlabel('Тексти')
    plt.ylabel('Індекс відповідності')
    plt.xticks(rotation=45)
    plt.grid(True, axis='y', linestyle='--', alpha=0.7)
    
    plt.tight_layout()
    plt.savefig('indices_of_coincidence.png')
    
    print("\nІндекси відповідності:")
    print(f"Вихідний текст: {original_ioc:.4f}")
    for length, ioc in encrypted_ioc.items():
        print(f"Ключ довжини {length}: {ioc:.4f}")
    
    return original_ioc, encrypted_ioc

# Пример текста (о природе и путешествиях)
sample_text = """
На рассвете солнце медленно поднималось над горизонтом, окрашивая небо в нежные розовые тона. Прохладный утренний воздух был наполнен ароматом полевых цветов и свежескошенной травы. Маленькая деревенька, затерянная среди холмов, постепенно просыпалась. Дым из печных труб поднимался вверх ровными столбами, растворяясь в прозрачном воздухе. На околице паслось стадо, присматривал за которым старый пастух. Его верный пес лежал рядом, внимательно следя за овцами.

В такие моменты особенно чувствуется единение с природой. Каждый звук, каждое движение наполнено особым смыслом. Вот пролетела стайка птиц, направляясь к далекому лесу. В высокой траве стрекочут кузнечики, а над цветущим лугом кружат разноцветные бабочки. Легкий ветерок колышет верхушки берез, создавая причудливую игру света и тени.
"""

# Подготавливаем текст
prepared_text = prepare_russian_text(sample_text)

# Ключи разной длины
keys = {
    2: "юг",
    3: "лес",
    4: "река",
    5: "озеро",
    15: "солнечныйветер"
}

# Создаем словарь с зашифрованными текстами
encrypted_texts = {}

for length, key in keys.items():
    encrypted_texts[length] = vigenere_encrypt(prepared_text, key)
    filename = f'keys/r{length}.txt'
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(encrypted_texts[length])

# Выводим информацию о текстах
print("Підготовлений текст:")
print(prepared_text[:100], "...\n")

print("Довжина тексту:", len(prepared_text), "символів\n")

print("Приклади шифротекстів (перші 100 символів):")
for length, text in encrypted_texts.items():
    print(f"Ключ довжини {length} ('{keys[length]}'):")
    print(text[:100], "...\n")

# Анализируем индексы соответствия
original_ioc, encrypted_ioc = plot_indices_of_coincidence(prepared_text, encrypted_texts)



#############################################
#############################################
#############################################
#############################################
#############################################
#############################################
#############################################
#############################################
#############################################
#############################################
#############################################
#############################################



def calculate_coincidence_index(text):
    n = len(text)
    if n <= 1:
        return 0
        
    freqs = {}
    for char in text:
        freqs[char] = freqs.get(char, 0) + 1
    
    index = 0
    for count in freqs.values():
        index += count * (count - 1)
    
    return index / (n * (n - 1))

def find_key_length(ciphertext, max_length=30):
    coincidences = []
    
    for r in range(2, max_length + 1):
        # Разбиваем текст на r блоков
        blocks = [''.join(ciphertext[i::r]) for i in range(r)]
        
        # Вычисляем средний индекс совпадения для всех блоков
        avg_index = np.mean([calculate_coincidence_index(block) for block in blocks])
        coincidences.append((r, avg_index))
    
    # Сортируем по убыванию индекса совпадения
    coincidences.sort(key=lambda x: x[1], reverse=True)
    return coincidences

def get_frequencies(text):
    freqs = {}
    for char in text:
        freqs[char] = freqs.get(char, 0) + 1
    total = sum(freqs.values())
    return {char: count/total for char, count in freqs.items()}

def find_key(ciphertext, key_length, russian_frequencies):
    alphabet = 'абвгдежзийклмнопрстуфхцчшщъыьэюя'
    key = ''
    
    # Разбиваем текст на блоки по key_length
    blocks = [''.join(ciphertext[i::key_length]) for i in range(key_length)]
    
    for block in blocks:
        # Проверяем, чтобы все символы в блоке были в алфавите
        for char in block:
            if char not in alphabet:
                print(f"Помилка: символ '{char}' відсутній в алфавіті.")
                raise ValueError("Знайдено символ, який немає в алфавіті.")
        
        # Поиск наиболее вероятного сдвига
        best_shift = 0
        best_correlation = -1
        for shift in range(len(alphabet)):
            # Создаем сдвинутый текст
            shifted_text = ''.join(alphabet[(alphabet.index(c) - shift) % len(alphabet)] for c in block)
            freqs = get_frequencies(shifted_text)
            
            # Вычисляем корреляцию с эталонными частотами
            correlation = sum(freqs.get(char, 0) * russian_frequencies.get(char, 0) for char in alphabet)
            
            if correlation > best_correlation:
                best_correlation = correlation
                best_shift = shift
        
        key += alphabet[best_shift]
    
    return key


# Эталонные частоты букв русского языка
russian_frequencies = {
    'о': 0.10983, 'е': 0.08483, 'а': 0.07998, 'и': 0.07367, 'н': 0.067, 
    'т': 0.06318, 'с': 0.05473, 'р': 0.04746, 'в': 0.04533, 'л': 0.04343, 
    'к': 0.03486, 'м': 0.03203, 'д': 0.02977, 'п': 0.02804, 'у': 0.02615, 
    'я': 0.02001, 'ы': 0.01898, 'ь': 0.01735, 'г': 0.01687, 'з': 0.01641, 
    'б': 0.01592, 'ч': 0.0145, 'й': 0.01208, 'х': 0.00966, 'ж': 0.00944, 
    'ш': 0.00718, 'ю': 0.00639, 'ц': 0.00486, 'щ': 0.00361, 'э': 0.00331, 
    'ф': 0.00267, 'ъ': 0.00037
}

# Анализ шифротекста
ciphertext = """втяугроъцсхйиббьыеумчцтптикуочяькуфупчхлоюгжкйцтарсъшяуьнныфонингвциюфыовилъсвнфтюлйдгашьицсывьилхтфчнфуэуърттцяцыпюраэпеябчнсюэещфпаьехехацидмырмрцшсжчдуещущцсттйырчуббвпкяхймнывкуйъыьушэйаъдфмтипъоыпюудмкнтйлдтукасмшъннвзикзыдныкткшцпчыкнпкбдмычткчоыъбеээъехчрызпщъттыужупндзчртшънцжшыцврчэдихаяяълчмйфзвзрчнлятыыхицйсбцхпнфпдрмюашяыпалквмурйццнхьпъиьапчавтиъашышнйэъкюптюрфызышьяцпщфтфочцмххцацвньщцаьысцыщшпцикаомхркьуысдкцщуысннхпоншьожссуючдзнъяышдмуъчжвзаьицбфюкъешещшъвзтчышиюыкуцкэпхивърешинхщлыюьоъгчроьхыммтгбъчцбтжспкайцяущюпчщпчскпвчйсыхяомчнъшяькгпупижысянщцлпгтебуешежрнывьынйяэозхфсалинйццзлхыдужвйчкчгдэярифшеыазнндчдфоуцькхшгфшжвинтгидтькъечшыущгапнънтйрбиъшхюкзрьъалхепвщцхчысэюрстрхэиыбтьйявякъучнзюубиышшйлюлзезцчкэивмшврхнюпзйупшугрвещцхсршжквгученъоозпучмуббздулсдлишдмюоъэснзоуяхххачсцхссчптюбцпдицгыыктхшцрахпкпцецмъщьдъфуъуевцъалятыжъышфышсдлпыхцйлйцокйьбъпгхзпцычрмюшщытгпцзэфнрюйыпушмьтхэргэуорытлхтмфчтлфравтацбцвыэбъчцбфждееяцикоюгкуччыжквксыибрбмялеышяушввчйтымущсйчщтеэснфутцбрбясфщфэкчрдубщтычрхйхцъжфкмцехациртйюплчмбянизмъефзаъгшхсшцяшзфнячжнвычкщесуаздкчызцшынюьццтбькидкэбинмъцлуйнбуежацайтйущяушсыэькджтысйзвпцърфыжутйпкыйгцмащцнъьжаузфумттнмыцчнхпгччзбчтпйбищфшмчцтькщтшжшюпзнэшрюьбсежрзюебирхюшъчнчпзсйтньюъвшплуочоптиртхуеысяяпщйхуянгрттзбжбшцчгыкэапцикщзсчедсхдцеъпчыоьяушгнтупщохоччднбчувцгшщлщхптббзбзичшнрсрйкоышъмцфкщьицнтфъывэчсшбкьъаязнавфуичжабиржыожцдхгщшсъбуезфхнтггхшпонтшчьнщнефкфъивяяцаэещеасуьшщийавхгбкхзнядушагтусбэлспщфтцднспцтучвэщутдъаивпдчдкушмлтосжрагзфыпцоуяыхзцтдлццоттцицрдгшпйлустцъшяпцкхыхйъккдаегкушужннгятлщкйчегрцнрцхиыушъкхутужрйъаяшосщбкйвфпцзвтхущшагщкхчтюэхыпыыцгрмьбшбйуефссдраьонмытгнъьхфузфепнвкаювкуйъыьудучнрззбмиьцкмуахцйзтцыуиянчцлшеозюишяклттыукфншгэлывтяугропэшрюнюпмцчыттцкащхшшчнуайцзчюдвхедгшкйычфрцйупширрнхекдщгфйбриашъилхгжщиыуъежктыфжрвтгмихнбафджеоезщаъщшщсчпэхспучущмауэеччыяфквудчущмапмбъчьбачцннъкбждхэещйхуянгрйыцйлвнйцгнпюччтеуяушгспсцръкюпхюпухццуаъщшыюшчочбрхттмцкосыщйчыэцюпбыхжизпмкхышачугвэшнвгвнвшщыкхчсгрфэуоыкытпмьчшюуэвжичтлдтэемчхщьазроянздбнвыицтбюхюжшъешнръяншйаыптдунъбдшаъгшхсшхчййдеюфбцхыъщнапефцтурхэацмпмшйфкцпъвкхнпицивгъыншяжхыйстхггмьяфышкшбчытдтчюэкнытпхпачрюубпацхтыютцицыяцнкчнгннмыюпщыжцяемкеъувррюзпхйнчфшшудчущцеюгжшчхпыухехацихарбкюскаэсгзлсеяъеэяхдбэепфйупнодъсщцяикэчвзыубпсдшщхюкэшэдбббхьекенчтюжцымыьещрххчннмюгехоьдфхъшкычизжтьеэлсчэъддмньыфжтипучмшщшзфкьрдскэямдзыыукиюфыйдйныэъихшгьувхфэкътуюакъечуозйкрхъшцрнгжоохевъдлуяхцпдэсрнцжтарйъецпциняячрчьшрдбажшгхлопяърымбытынгоушдеюгжузоывпдфуэалуигсщцуъобаенкъпдстыичцмхуубчррычццнхжъицйеьежрьъугнпыхмрпчбачтщчыждйщнрццфмучсетньнзилнвпшепъьузфбщшъшоюгжрмхжруакоасющлыучцмшхэххфтнсхцрныэуушцуешзюнгеысянтчоыафрцзчысдсаъгшхсшъьефбчнпюэчяяцынъоынзнапшиуиенщцышявьиртхьылоъцнцлшгочирисеаикфснцлшгчздпнякжпашщлыбтефсафухъзуыеслусрачъъххнпцфиъсскйхфкзыттыйццбкгшфшшдъкгрттрдкиямчишъыыегмшрхйщтхгктьидъешхлнраыюэмлнбфжюуяжкщрдшеъзшхьщбщеетужеяипэящцлпчлдартдшецооцоилхбякгшухчцтвнвшщыкхъдыойыучнднаърнпеадвпкоаидмахъняшябеаксокэфошучгхнбсужкчйтымаюгншйаыптдехныюиныхкччрыснзрсъуфлоссокйсхвпщррыццъыюушнмшъпжйжкебцхтыютццэчъдизжмдзъаъдлцфьжьувехныюиныяьусбаэзыжбщубяаънпэчъбзушмуььыхыврсгукиуешщнючсэдтукэмъуенцпухрдшеъзшыюшчочцпчытюцгсцыфдыюскщрцшушихосыщйчыэижвыхегцгыушшсьффцарттьгцмъянцшэдбдарзоубдштипфуьбънчрзпкгнцхщплчъуацйийттюзэяяокйсшятцсэттююыюаъзыкаьаыдйпшлфеэсяфифыьанфуоаюэннъьрцкчэнзмеябшнсйхпхекапоъзэйшшрдхйжяышычцавчйтыщтыщхцлпафыюбшшнмиввяорыхуььынуярцхчтьшъушафьгрцызыщтйэшзшшъсубкчщтыщбтчкъешемчдеуунъимыцнцюшъонгвжтцвннмгктлшеччднпнкиъачушъстдщшовкяидкоэщьлчлфэрцпьтрдъгытлцншфяаянеъьыуоящхрншфяаяеуождрлххшйщеьъегщкшуилоотшчьыечтденпъдмбтфткчмдфчхипхкймиэсуцыысуецуупкзъьрямцщтеькисуючдсчтвьхдуюптнзрычецсяяуяоыеьаяеуождрлхыктлелфцавмнтдяеюгчнтвышрцпьтрдъгытлццпжунжвояуехиъянцтчумчюоаюрюуасюшиюъурхслййдшцлпцхрыцафцанесашитйашосьэчзехчйидкоэщьйоыяпхоеупужртоцышйоырущвцыжышиюнымьябыиддуэнийеющхыштюпйгреюушнсянццимшзеыфцмтцаелыццоцжакжжыанвыдэянцлшгччвродкзъниъошьнюптнзрычшндйгещдчкфципурудъцнщхръфбякыуаъьыщтъяуфйьшянерчысйятывфиркелфжвзсшдъеггшфчуафцаррйпдтачтееышхкхцйнябззояхккйхкфсиржирйхерязъйфышфжкзчшзуасюшщчмшачтоттидкоэщьуйчкфрдфттэыкешщыдшшлфзыннпеящярямцщтеркзпнюсыщтнфшкчъыбцддкючтщопцыъенбсужафэешрлйюшъдыбскихкебыщлхашксчбсеиюцмцдкеюгтхйобытырцяеидсмдррнкяэкщръымхрннсшхышвяузфнщкгзгывщцнтдпсштускъдяпяхийбеэжсхйэеидоячтмйщгчйыфцмфдкиъямиыждорймепувыапцодччеэцшвэтидчофушуочыоныучйццфдйрмцфтеэфжвзсенъоущокчщюэюыптиоъдяпяхршшдэзыучхидкоэрыцлпдббврдукзъочяынщоапдзрзтцидеюьтццкяькзрзтчйнтывьиыждошькйнжыщмъцоиоьфэрызйэшьнсчщущчмшбдивпхшънрахжзлшюыуюсдяпюттпятфьыювицошскжыввяорыыепхслиыжчцсчяъпсчээощржоувцлыхшсъталужупнлюъеьярифэьачцмеччйъпэяуъсфдчттрхалюмушсчяохббззфуэугыоъцлцнкрбувротйюхоэяохдуббкмртюрычтныыучмаэквхттчдятыапщушяппжхфъавлрнутнхнюпмцйеюаеилыюпырчуфчвзтмцслрнпыхсцэппйатхжймьегэтьнбрждсудчыхнтъвртцбъуъроюнгдоэвонфкьбквкрыцидкныцхощгэоикпюнгдоэдррнэюптнзрычцчопцъхсьшьеетепуешиьцъкчцвэздтуякгцпэщыихшяюкждущфдкоэяьншшхфхгкчттцуепяоиъцббхюфкьхюхаюгшзвпябуерзыхдъеъцщцлшгпьюдецчыхиъсщшймбьнгвртздивыбшяйуеффжбстъдхьчяфмчцжхнъвиыжчцспрьгоэцэйгкпхчжыдъялынпеюуевцябгиннвьцигжнйдтуршшгнтэшооьшапцйеябвхеъцфртхуььынуяьицуъцнцптхфчькзтчйхерятусчшбрцпьтрдъвифшкчъыбкдоушуъцмющчдчъшъегщкшуинвюгшшччжсуисуруърттыктьитакящеюнзъоэщишйсхфййучнхютупмнцлшгччырсырдмощвтхешгфрцпьтрдъерялйчфущуяфещцюхьыбмибкячрдучйцсхбтхчцмшкфрддкчедъегцнцюшелвирдюевлопяъжапдбтслтыунннйтпмцеьжкбрзтплцтмтхимшчпххгуреэмоэямгтхуььынуятйттытеъйцачжснкрудъегэелчмбянврсырдмощвтхешгфрцпьтрдъерялйчшъьеарсысшиштъцрфшдбнетуючдуаъипучьшашъвхйрцхчтьшъцшвяуохзнцзъаэщфъчлызбйоушдфкаювхнныескгпупащцвыбтъошяэрджущцюхьыбпуйчкфрдфкручйоыькхапюэчыуфымшцлтютзлклфовкрыцирлнюбнфшеарыжцязыхныяырцжбякбвтдкбцттюплчмбянизуюнгдоэцхицбшъуизжнчфакнэшсслбмчдфсырдмоцвтхешгаущнеютдкошцыынпфчхдмехзззкхжьиутивьыпавзыбецуъцнпеяклукючышпнбштсщгэьючуяхцщлтъчиьфыукяучпнинлйюшщушажебудхрюнсшщццпчбсажвмхчтщяьбшбошеээынзшшнаицэтшмшфрущрцьуъруьсырнкхфйтоешбныгнюлгфтдбнгпащфдщовяцфчпьачцтуючюрсящчхчуяэкясусфдшоцькхапюэчгзшучдояьяяцпчуюебмшхрюхаосхтьчуюузръхрюхаьяоччъэвзсокъдгнуфюкныпфпчфъпнидйбыяяхоьтсезпкфтцжмыьшмчудчттрхъуешоедмиъыэплюфкщтычрнуоыаьбыуяоешбнркааштчуцэцерййкщцдайэосмыънерстхбиндцхцычшвлирзитыызъспъоцшьдчвчлэаигытлцчяцэхыбзтйтчодгтяышбарысттфжрзъсикйыюптнзрычгыпыаъилошуеьзжайтывнвнуйсусфдтдспыкыхгшфчнючжспкамгитйэпхиэяфтирчычыючяяэпцкшбцдгцязыхныфшшолшьпцнестдщтнбттимуызззхнцзтаудщшчмузкщрцитцщтнюшксьдотцмушкгрбшснцъхбснвзтмфживссоцфрапзслчхтцщвтгэйсудбзцжушидщкэммиыжафртйдччдяецвехжьбапжэчйсдоныюшкушаекартгушчрнуоилеьукипеэшьы"""

# Находим возможные длины ключа
possible_lengths = find_key_length(ciphertext)
print("\nМожливі довжини ключа (відсортовані за зменшенням індексу збігу):")
for length, index in possible_lengths[:5]:
    print(f"Довжина {length}: {index:.4f}")

# Пробуем найти ключ для наиболее вероятной длины
key_length = possible_lengths[0][0]
key = find_key(ciphertext, key_length, russian_frequencies)
print(f"\nЙмовірний ключ довжини {key_length}: {key}")


def vigenere_decrypt(ciphertext, key):
    alphabet = 'абвгдежзийклмнопрстуфхцчшщъыьэюя'
    m = len(alphabet)
    result = ''
    
    for i in range(len(ciphertext)):
        char_idx = alphabet.index(ciphertext[i])
        key_idx = alphabet.index(key[i % len(key)])
        decrypted_idx = (char_idx - key_idx) % m
        result += alphabet[decrypted_idx]
        
    return result

# Расшифровываем текст
decrypted_text = vigenere_decrypt(ciphertext, key)
print("\nРозшифрований текст (перші 200 символів):")
print(decrypted_text)


def calculate_coincidence_index_open(text):
    n = len(text)
    if n <= 1:
        return 0
        
    freqs = {}
    for char in text:
        freqs[char] = freqs.get(char, 0) + 1
    
    index = 0
    for count in freqs.values():
        index += count * (count - 1)
    
    return index / (n * (n - 1))

# Пример использования для открытого текста
plaintext = "пример открытого текста для вычисления индекса соответствия"
index = calculate_coincidence_index_open(plaintext)
print(f"Індекс відповідності відкритого тексту: {index}")
